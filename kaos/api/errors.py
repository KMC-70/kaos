"""Defines all errors used by the view functions to signal a response to the caller."""

from flask import jsonify

class APIError(Exception):
    """Base class for all API related errors which are designed to trigger responses to the users.

    These errors are handled by the application and printed as a standard JSON response to
    the user.
    """

    def __init__(self, reasons, status_code=400, **kwargs):
        """Args:
            reasons (dict): A dictionary containing the reason(s) for a failure.
            status_code (int, optional): status code of the generated response. Defaults to 400.
            **kwargs: Additional information that will be attached to the generated response.

        """
        Exception.__init__(self)

        self.reasons = reasons
        self.status_code = status_code
        self.extra_info = kwargs

    def to_response(self):
        """Produces a JSON representation of an error.

        The produced response will conform to the following style:
        {
            'reasons': reasons,
            'more_info': **kwargs,
        }

        Returns:
            A JSON object representing the error.
        """
        response = jsonify({'reasons': self.reasons, 'extra_info': self.extra_info})
        response.status_code = self.status_code
        return response

class NotFoundError(APIError):
    """Error to be raised when an entry/id is not found.

    Responses generated by this error will have the offending field(s) as keys to the reason dict:
    {
        'reasons': {
            '<field>': 'Entry with value <value> not found',
        }
    }
    """

    def __init__(self, field_name, value):
        """Args:
            field_name (str): The field/property whose entry was not found
            value (obj): The value that the user tried to access
        """
        reason = {field_name: 'Entry with value: {} not found'.format(value)}
        APIError.__init__(self, reason, status_code=404)

